# https://github.com/goharbor/harbor-helm/blob/main/values.yaml

expose:
  type: clusterIP
  tls:
    enabled: false
  clusterIP:
    name: harbor
    annotations: {}
    ports:
      httpPort: 80
      httpsPort: 443

externalURL: https://registry.ns.trap.jp

internalTLS:
  enabled: false

ipFamily:
  ipv6:
    enabled: true
  ipv4:
    enabled: true

persistence:
  enabled: true
  resourcePolicy: "keep"
  imageChartStorage:
    type: s3
    s3:
      # Set an existing secret for S3 accesskey and secretkey
      # keys in the secret should be REGISTRY_STORAGE_S3_ACCESSKEY and REGISTRY_STORAGE_S3_SECRETKEY for registry
      existingSecret: "storage"
      region: ap-northeast-1
      bucket: trap-ns-registry
      regionendpoint: https://s3.ap-northeast-1.wasabisys.com

imagePullPolicy: Always

# The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
# Set it as "Recreate" when "RWM" for volumes isn't supported
updateStrategy:
  type: RollingUpdate

# debug, info, warning, error or fatal
logLevel: info

existingSecretAdminPassword: "admin-password"
existingSecretAdminPasswordKey: HARBOR_ADMIN_PASSWORD

existingSecretSecretKey: "secret-key"

# Run the migration job via helm hook
enableMigrateHelmHook: false

# If service exposed via "ingress", the Nginx will not be used
nginx:
  revisionHistoryLimit: 0

portal:
  revisionHistoryLimit: 0

core:
  # core-cert generated with the following helm function: genCA "harbor-token-ca" 36500
  secretName: core-cert
  revisionHistoryLimit: 0
  resources:
    requests:
      cpu: "10m"
      memory: "30Mi"
    limits:
      cpu: "300m"
      memory: "200Mi"

jobservice:
  maxJobWorkers: 1
  jobLoggers:
    - stdout
  revisionHistoryLimit: 0
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "300m"
      memory: "500Mi"

registry:
  registry:
    resources:
      requests:
        cpu: "10m"
        memory: "20Mi"
      limits:
        cpu: "300m"
        memory: "300Mi"
  controller:
    resources:
      requests:
        cpu: "10m"
        memory: "20Mi"
      limits:
        cpu: "300m"
        memory: "300Mi"
  revisionHistoryLimit: 0
  credentials:
    username: "registry"
    password: "password"
    # Login and password in htpasswd string format. Excludes `registry.credentials.username`  and `registry.credentials.password`. May come in handy when integrating with tools like argocd or flux. This allows the same line to be generated each time the template is rendered, instead of the `htpasswd` function from helm, which generates different lines each time because of the salt.
    # NOTE: has to match with above username/password, see: https://github.com/goharbor/harbor-helm/issues/1210
    htpasswdString: "registry:$2a$10$hktXbwlqdEiTyxGbBDGFtO./2Zk.FQF5Dr9klO1hL7RUsZyq1O3ay"

trivy:
  enabled: true
  # Has PersistentVolumeClaim
  nodeSelector:
    kubernetes.io/hostname: c1-203.tokyotech.org
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "1"
      memory: "500Mi"

database:
  type: internal
  internal:
    password: "password"
    shmSizeLimit: 128Mi
    livenessProbe:
      timeoutSeconds: 5
    readinessProbe:
      timeoutSeconds: 5
    # Has PersistentVolumeClaim
    nodeSelector:
      kubernetes.io/hostname: c1-203.tokyotech.org
    resources:
      requests:
        cpu: "10m"
        memory: "100Mi"
      limits:
        cpu: "300m"
        memory: "200Mi"

redis:
  type: internal
  internal:
    # Has PersistentVolumeClaim
    nodeSelector:
      kubernetes.io/hostname: c1-203.tokyotech.org
    resources:
      requests:
        cpu: "10m"
        memory: "100Mi"
      limits:
        cpu: "100m"
        memory: "200Mi"

exporter:
  revisionHistoryLimit: 0

metrics:
  enabled: false

trace:
  enabled: false
