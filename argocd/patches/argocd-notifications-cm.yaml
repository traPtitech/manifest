apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm

data:
  context: |
    argocdUrl: https://cd.trap.jp
  subscriptions: |
    - recipients:
        - traq
      selector: skip-default-notification!=true
      triggers:
        - on-created
        - on-deleted
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-running
        - on-sync-status-unknown
  service.webhook.traq: |
    url: https://q.trap.jp/api/v3/webhooks/$traq-webhook-id
    headers:
      - name: Content-Type
        value: "text/plain; charset=utf-8"
      - name: X-TRAQ-Channel-Id
        value: 7f254d6d-41a4-4bff-bc95-4a60b3373875
  service.webhook.ns-preview: |
    url: https://q.trap.jp/api/v3/webhooks/$traq-webhook-id
    headers:
      - name: Content-Type
        value: "text/plain; charset=utf-8"
      - name: X-TRAQ-Channel-Id
        value: e2f07412-251c-405d-8a09-0ced69b84952
  service.webhook.traq-preview: |
    url: https://q.trap.jp/api/v3/webhooks/$traq-webhook-id
    headers:
      - name: Content-Type
        value: "text/plain; charset=utf-8"
      - name: X-TRAQ-Channel-Id
        value: 4c7e3e50-de56-44b1-a60f-00f9893ef222
  template.app-created: |
    webhook:
      traq:
        method: POST
        body: |
          ### :new: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Created :new:
  template.app-deleted: |
    webhook:
      traq:
        method: POST
        body: |
          ### :ayase_null: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Deleted :ayase_null:
  template.app-deployed: |
    webhook:
      traq:
        method: POST
        body: |
          ### :mokuri_love: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) for [`{{ substr 0 7 .app.status.sync.revision }}`](//github.com/traPtitech/manifest/commit/{{ .app.status.sync.revision }}) Deployed :mokuri_love:
  template.app-preview-deployed: |
    webhook:
      ns-preview:
        method: POST
        body: |
          ### :mokuri_love: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) for [`{{ substr 0 7 .app.metadata.annotations.prPreviewHeadSha }}`](//github.com/traPtitech/NeoShowcase/commit/{{ .app.metadata.annotations.prPreviewHeadSha }}) Deployed :mokuri_love:
          
          - Preview → https://{{ .app.metadata.annotations.prNumber }}.ns-preview.trapti.tech/
          
          PR → https://github.com/traPtitech/NeoShowcase/pull/{{ .app.metadata.annotations.prNumber }}
      traq-preview:
        method: POST
        body: |
          ### :mokuri_love: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) for [`{{ substr 0 7 .app.metadata.annotations.prPreviewHeadSha }}`](//github.com/traPtitech/traQ_S-UI/commit/{{ .app.metadata.annotations.prPreviewHeadSha }}) Deployed :mokuri_love:
          
          - Preview (prod) → https://{{ .app.metadata.annotations.prNumber }}-prod.traq-preview.trapti.tech/
          - Preview (dev) → https://{{ .app.metadata.annotations.prNumber }}-dev.traq-preview.trapti.tech/
          
          PR → https://github.com/traPtitech/traQ_S-UI/pull/{{ .app.metadata.annotations.prNumber }}
      portfolio-ui-preview:
        method: POST
        body: |
          ### :mokuri_love: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) for [`{{ substr 0 7 .app.metadata.annotations.prPreviewHeadSha }}`](//github.com/traPtitech/traPortfolio-UI/commit/{{ .app.metadata.annotations.prPreviewHeadSha }}) Deployed :mokuri_love:
          
          - Preview (prod) → https://{{ .app.metadata.annotations.prNumber }}-prod.portfolio-preview.trapti.tech/
          - Preview (dev) → https://{{ .app.metadata.annotations.prNumber }}-dev.portfolio-preview.trapti.tech/
          
          PR → https://github.com/traPtitech/traPortfolio-UI/pull/{{ .app.metadata.annotations.prNumber }}
  template.app-health-degraded: |
    webhook:
      traq:
        method: POST
        body: |
          ### :alert: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Degraded :alert:
          {{range $c := .app.status.conditions}}
          **{{$c.type}}**: {{$c.message}}
          {{end}}
  template.app-sync-failed: |
    webhook:
      traq:
        method: POST
        body: |
          ### :exclamation: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Sync Failed :exclamation:
          {{range $c := .app.status.conditions}}
          **{{$c.type}}**: {{$c.message}}
          {{end}}
  template.app-sync-running: |
    webhook:
      traq:
        method: POST
        body: |
          ### :spinner: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Syncing :spinner:
  template.app-sync-status-unknown: |
    webhook:
      traq:
        method: POST
        body: |
          ### :question: [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Sync Status Unknown :question:
          {{range $c := .app.status.conditions}}
          **{{$c.type}}**: {{$c.message}}
          {{end}}

  # default triggers from: https://github.com/argoproj/argo-cd/blob/master/notifications_catalog/install.yaml
  trigger.on-created: |
    - description: Application is created.
      oncePer: app.metadata.name
      send:
      - app-created
      when: "true"
  trigger.on-deleted: |
    - description: Application is deleted.
      oncePer: app.metadata.name
      send:
      - app-deleted
      when: app.metadata.deletionTimestamp != nil
  trigger.on-deployed: |
    - description: Application is synced and healthy. Triggered once per commit.
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-deployed
      when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
        and app.status.health.status == 'Healthy'
  trigger.on-preview-deployed: |
    - description: Application is synced and healthy. Triggered once per PR commit.
      oncePer: app.metadata.annotations.prPreviewHeadSha
      send:
      - app-preview-deployed
      when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded'] 
        and app.status.health.status == 'Healthy'
  trigger.on-health-degraded: |
    - description: Application has degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  trigger.on-sync-failed: |
    - description: Application syncing has failed
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  trigger.on-sync-running: |
    - description: Application is being synced
      send:
      - app-sync-running
      when: app.status.operationState.phase in ['Running']
  trigger.on-sync-status-unknown: |
    - description: Application status is 'Unknown'
      send:
      - app-sync-status-unknown
      when: app.status.sync.status == 'Unknown'
  trigger.on-sync-succeeded: |
    - description: Application syncing has succeeded
      send:
      - app-sync-succeeded
      when: app.status.operationState.phase in ['Succeeded']
